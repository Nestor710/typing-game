---
import Layout from '../layouts/Layout.astro';
---

<script>
	import { words as INITIAl_WORDS } from '../data/words'
	const $time = document.querySelector('time') as HTMLTimeElement;
	const $paragraph = document.querySelector('p') as HTMLParagraphElement;
	const $input = document.querySelector('input') as HTMLInputElement;

	const $game = document.querySelector('#game') as HTMLElement;
	const $results = document.querySelector('#results') as HTMLTimeElement;
	const $wpm = document.querySelector('#wpm-result') as HTMLParagraphElement;
	const $accuracy = document.querySelector('#result-accuracy') as HTMLInputElement;
	const $button = document.querySelector('#reload-button') as HTMLButtonElement;

	const INITIAL_tiME = 30;

	let words = [];
	let currentTime = INITIAL_tiME;

	initGame();
	initEvents();

	function initGame() {
		$game.style.display = 'flex';
		$results.style.display = 'none';
		$input.value = '';


		words = INITIAl_WORDS
		.toSorted(() => Math.random() - 0.5)
		.slice(0, 32);
		currentTime = INITIAL_tiME;

		$time.textContent = currentTime.toString();

		$paragraph.innerHTML = words.map((word, index) => {
			const letters = word.split('');

			return `
				<word>
					${
						letters.map(letter  => `<letter>${letter}</letter>`)
						.join('')
					}
				</word>
			`
		}).join('')

		const firstWord =  $paragraph.querySelector('word') as HTMLElement;
		firstWord.classList.add('active');
		(firstWord.querySelector('letter') as HTMLElement).classList.add('active');



		const intervalId = setInterval(() => {
			currentTime--
			$time.textContent = currentTime.toString();
			if (currentTime === 0) {
				clearInterval(intervalId);
				gameOver();
			}
		}, 1000);

	}

	function initEvents() {
		document.addEventListener('keydown' , () => {
		  $input.focus();
		})
		$input.addEventListener('keydown', onKeyDown);
		$input.addEventListener('keyup', onKeyUp);

		$button.addEventListener('click', initGame)
	}

	function onKeyDown(event: KeyboardEvent) {

		const $currentWord = $paragraph.querySelector('word.active') as HTMLElement;
		const $currentLetter = $currentWord.querySelector('letter.active') as HTMLElement;

		const { key } = event;
		if (key === ' ') {

			event.preventDefault();

			const $nextWord = $currentWord.nextElementSibling as HTMLElement
			const $nextLetter = $nextWord.querySelector('letter') as HTMLElement;

			$currentWord.classList.remove('active', 'marked');
			$currentLetter.classList.remove('active');

			$nextWord.classList.add('active');
			$nextLetter.classList.add('active');

			$input.value = '';

			const hasMissedLetters = $currentWord.querySelectorAll('letter:not(.correct)').length > 0;

			const classToAdd = hasMissedLetters ? 'marked' : 'correct';
			
			$currentWord.classList.add(classToAdd);

		}

		if (key === 'Backspace') {
			const $previousWord = $currentWord.previousElementSibling as HTMLElement;
			const $previusLetter = $currentLetter.previousElementSibling as HTMLElement;

			if (!$previousWord && !$previusLetter) {
				event.preventDefault()
				return;
			}

			const $wordMarked = $paragraph?.querySelector('word.marked');
			if ($wordMarked &&!$previusLetter) {
				event.preventDefault();
				$previousWord.classList.remove('marked');
				$previousWord.classList.add('active');

				const $letterToGo = $previousWord.querySelector('letter:last-child') as HTMLElement;
				$currentLetter.classList.remove('active');
				$letterToGo.classList.add('active');

				$input.value = [
					...$previousWord.querySelectorAll('letter.correct, letter.incorrect')
				].map(($el => {
					return $el.classList.contains('correct') ? $el.textContent : '*'
					$el.textContent
				}))
				.join('')
			}
		}
	}

	function onKeyUp() {
		const $currentWord = $paragraph.querySelector('word.active') as HTMLElement;
		const $currentLetter = $currentWord.querySelector('letter.active') as HTMLElement; 

		const currentWord = $currentWord.innerText.trim();

		$input.maxLength = currentWord.length;
		console.log({value: $input.value, currentWord});

		const $allLetters = $currentWord.querySelectorAll('letter');

		$allLetters.forEach($letter => $letter.classList.remove('correct', 'incorrect'));

		$input.value.split('').forEach((char, index) => {
			const $lettter = $allLetters[index];
			const letterToCheck = currentWord[index];

			const isCorrect = char == letterToCheck
			const letterClass = isCorrect ? 'correct' : 'incorrect';
			$lettter.classList.add(letterClass);
		})


		$currentLetter.classList.remove('active', 'is-last');

		const inputLength = $input.value.length;
		const $nextActiveLetter = $allLetters[inputLength];

		if ($nextActiveLetter) {
			$nextActiveLetter.classList.add('active');
		} else {
			$currentLetter.classList.add('active', 'is-last');
			// TODO: Game over si no hay otra palabra
		}

	}

	function gameOver() {
		$game.style.display = 'none';
		$results.style.display = 'flex';

		const correctWords = $paragraph.querySelectorAll('word.correct').length;
		const correctLetters = $paragraph.querySelectorAll('letter.correct').length;
		const incorrectLetters = $paragraph.querySelectorAll('letter.incorrect').length;

		const totalLetters = correctLetters + incorrectLetters;
		const accuracy = totalLetters > 0
		? (correctLetters / totalLetters) * 100
		: 0

		const wpm = correctWords * 60 / INITIAL_tiME
		$wpm.textContent = wpm.toString();
		$accuracy.textContent = `${accuracy.toFixed(2)}%`
	}

</script>

<Layout title="Monkey Type Clone - Test Yout typing skills">
	<section id="game">
		<time></time>
		<p id="paragraph"></p>
		<input type="text" autofocus>
	</section>
	<section id="results">
		<h2>wpm</h2>
		<h3 id="wpm-result"></h3>
		<h2>Accuracy</h2>
		<h3 id="result-accuracy"></h3>
		<button id="reload-button">
			<svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1.5"  stroke-linecap="round"  stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M19.933 13.041a8 8 0 1 1 -9.925 -8.788c3.899 -1 7.935 1.007 9.425 4.747" /><path d="M20 4v5h-5" /></svg>
		</button>
	</section>
</Layout>

<style is:global>

	#game {
		margin: 0 auto;
		padding: 0 calc(2rem / 2);
    	max-width: 1200px;
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	input {
		z-index: -999;
		position: absolute;
		top: 0;
		left: 0;
		pointer-events: none;
		opacity: 0;
	}

	time {
		color: var(--main-color)
	}

	#paragraph {
		display: flex;
		flex-wrap: wrap;
		gap: 3px 8px;
		margin: 0;
		font-size: 20px;
	}
	
	letter {
		color: var(--sub-color);
		position: relative;

		&.active.is-last::before {
			left: 65%;
		}

		&.active::before {
			content: '|';
			color: var(--caret-color);
			font-size: 20px;
			position: absolute;
			left: -65%;
			top: -5px;
			animation: 1s blink infinite ease-in-out;
		}
		&.correct {
			color: var(--text-color);
		}
		&.incorrect {
			color: var(--error-color);
		}
	}

	word {
		border-bottom: 1px solid transparent;
		transition: border-color 0.3s ease-in-out;
		&.marked {
			border-color: var(--error-color);
		}
	}

	@keyframes blink {
		0%, 100% {
			opacity: 0;
		}

		50% {
			opacity: 1;
		}
	}

	#game {
		display: flex;
	}

	#results {
		display: none;
		flex-direction: column;
	}

	h2 {
		font-weight: 400;
		opacity: .4;
		margin: 0;
		font-size: 16px;
	}

	h3 {
		font-weight: 400;
		margin: 0;
		font-size: 24px;
		color: var(--main-color);
	}

	button {
		background: transparent;
		border: 0;
		margin-top: 32px;
		padding: 16px;
		opacity: .4;
		display: inline-block;
		transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
		cursor: pointer;
		border-radius: 15px;
		display: flex;
		justify-content: center;

		&:hover {
			opacity: 1;
			scale: 110%;;
		}
	}

</style>
